#!/bin/bash

if [ ! -f /etc/turntable2sonos.cfg ]; then
    echo "Configuration file not found. Please create a configuration file at /etc/turntable2sonos.cfg"
    exit 1
fi

source /etc/turntable2sonos.cfg

radio_url="http://$(hostname).local:8000/stream.mp3"
echo "Sonos Device Name: $sonos_device_name"
echo "ALSA Device: $alsa_device"
echo "Debounce Interval: $debounce_interval_sec"
echo "Check Interval: $check_interval_sec"
echo "Audio Threshold: $audio_threshold_db"
echo "Radio URL: $radio_url"

# Check if the ALSA device exists
if ! aplay -L | grep -q "$alsa_device"; then
    echo "ALSA device '$alsa_device' not found, exiting"
    exit 1
fi

/usr/bin/icecast2 -c /etc/turntable2sonos/icecast.xml &
ICECAST_PID=$!
if ! ps -p $ICECAST_PID > /dev/null; then
    echo "Failed to start icecast2, exiting"
    exit 1
fi
echo "Icecast server available at http://$(hostname).local:8000"

/usr/bin/darkice -c /etc/turntable2sonos/darkice.cfg &
DARKICE_PID=$!
if ! ps -p $DARKICE_PID > /dev/null; then
    echo "Failed to start darkice, exiting"
    exit 1
fi
echo "Darkice started"

# Kill the icecast2 and darkice services when the script is terminated
trap "kill $DARKICE_PID $ICECAST_PID" EXIT

echo "Startd audio listener script on ALSA device ${alsa_device}"

# Initialize the last triggered time and silence start time
last_triggered_timestamp=0

while true; do
    # Capture a short audio sample from the specified ALSA device and get the RMS amplitude
    rms_amplitude=$(sox -t alsa "$alsa_device" -n stat trim 0 0.5 2>&1 | awk '/RMS/ { print $3 }' | head -n 1)

    # Check if RMS amplitude was successfully retrieved
    if [[ -z "$rms_amplitude" ]]; then
        echo "Failed to retrieve RMS amplitude. Skipping this iteration."
        sleep "$check_interval_sec"
        continue
    fi

    # Check if RMS amplitude exceeds the threshold
    exceeds_threshold=$(echo "$rms_amplitude > $audio_threshold_db" | bc -l)

    if [[ "$exceeds_threshold" != "1" && "$exceeds_threshold" != "0" ]]; then
        echo "Unexpected value for exceeds_threshold: '$exceeds_threshold'. Setting to 0."
        exceeds_threshold=0
    fi

    current_time=$(date +%s)

    if [ "$exceeds_threshold" = "1" ]; then
        if [ $((current_time - last_triggered_timestamp)) -ge "$debounce_interval_sec" ]; then
            echo "Sound detected (RMS: $rms_amplitude), triggering Sonos to play radio"
            ~/.local/bin/sonos "$sonos_device_name" play_uri "$radio_url"
            last_triggered_timestamp=$current_time
        else
            echo "Sound detected but within debounce interval. Ignoring."
        fi
    fi

    sleep "$check_interval_sec"
done